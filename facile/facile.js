console.log('Sorry , developers tools are blocked here....');

//calling all main html elements
const newGameBtn = document.getElementById('newGameBtn');
const checkWinBtn = document.getElementById('checkWinBtn');
const numpad1 = document.getElementById('number1');
const numpad2 = document.getElementById('number2');
const numpad3 = document.getElementById('number3');
const numpad4 = document.getElementById('number4');
const gridContainer = document.getElementById('grid');
const startGameInstructions = document.getElementById('start-game');
const timer = document.getElementById('timer');
const body = document.getElementById('body');
const navbar = document.getElementById('navbar');

//sets stats to nothing for new users
if(!localStorage.getItem('PB facile') && !localStorage.getItem('facile')){
    localStorage.setItem('PB facile', 'N/D');
    localStorage.setItem('facile', '0');
}

//Creating the grid dynamically
var cell = [];

function createCells(numCells){
    var idNumber = 0;
    for(let i = 0; i < Math.sqrt(numCells); i++){
        for(let j = 0; j < Math.sqrt(numCells); j++){
            var div = document.createElement("div");
            div.innerHTML = '';
            div.className = 'cell show';
            div.id = 'cell-' + idNumber;
            boldEverything(i, j, div);
            cell.push(div);
            idNumber++;
        }
    }
    return cell;
}

let createdGrid = createCells(16);

//Makes border of certain cells thicker
function boldEverything(i, j, div){
    if(i == 0 || i == 2){
        div.style.borderTop = '.3vw black solid';
    }if(j == 0 || j == 2){
        div.style.borderLeft = '.3vw black solid';
    }if(j == 3){
        div.style.borderRight = '.3vw black solid';
    }if(i == 3){
        div.style.borderBottom = '.3vw black solid';
    }
    
}

//Brings the grid to the page
function addCellstoPage(arr){
    for(let i = 0; i < arr.length; i++){
        document.getElementById('grid').appendChild(arr[i]);
    }
    
}

addCellstoPage(createdGrid);

//Grid generated by https://www.sudokuweb.org/
const solution = [ 
    [1, 3, 4, 2, 
    4, 2, 1, 3,
    2, 4, 3, 1,
    3, 1, 2, 4],

    [4, 2, 3, 1,
    3, 1, 4, 2,
    1, 3, 2, 4,
    2, 4, 1, 3],

    [1, 3, 2, 4,
    2, 4, 1, 3,
    4, 2, 3, 1,
    3, 1, 4, 2],

    [3, 2, 1, 4,
    4, 1, 2, 3,
    2, 4, 3, 1,
    1, 3, 4, 2],

    [2, 4, 1, 3,
    3, 1, 4, 2,
    1, 3, 2, 4,
    4, 2, 3, 1],

    [1, 2, 3, 4,
    4, 3, 2, 1,
    2, 4, 1, 3,
    3, 1, 4, 2],

    [4, 2, 1, 3,
    3, 1, 2, 4,
    1, 4, 3, 2,
    2, 3, 4, 1],

    [2, 4, 3, 1,
    3, 1, 2, 4,
    4, 2, 1, 3,
    1, 3, 4, 2],

    [2, 4, 3, 1,
    3, 1, 4, 2,
    4, 2, 1, 3,
    1, 3, 2, 4],

    [4, 2, 1 ,3,
    3, 1, 4, 2,
    2, 4, 3, 1,
    1, 3, 2, 4],

    [3, 2, 4, 1,
    1, 4, 2, 3,
    2, 3, 1, 4,
    4, 1, 3, 2],

    [4, 1, 2, 3,
    3, 2, 1, 4,
    2, 3, 4, 1,
    1, 4, 3, 2],

    [3, 1, 2, 4,
    4, 2, 3, 1,
    1, 3, 4, 2,
    2, 4, 1, 3],

    [4, 3, 1, 2,
    1, 2, 4, 3,
    2, 4, 3, 1,
    3, 1, 2, 4],

    [1, 4, 3, 2,
    3, 2, 1, 4,
    4, 3, 2, 1,
    2, 1, 4, 3]
];

const grid = [
    [1, '', 4, '', 
    '', 2, 1, '',
    '', '', 3, 1,
    '', '', '', 4],

    [4, '', 3, '',
    '', '', '', 2,
    1, 3, 2, 4,
    '', '', '', ''],

    ['', 3, '', '',
    '', '', 1, '',
    '', 2, 3, 1,
    3, '', 4, 2],

    [3, '', '', 4,
    '', 1, '', '',
    '', '', '', '',
    1, '', 4, ''],

    ['', 4, '', '',
    3, '', 4, '',
    '', 3, 2, '',
    '', '', 3, 1],

    ['', '', '', '',
    '', '', 2, 1,
    2, 4, 1, 3,
    3, 1, '', ''],

    ['', 2, 1, '',
    3, 1, 2, '',
    '', '', 3, '',
    2, '', '', ''],

    [2, '', 3, '',
    '', '', 2, 4,
    4, '', '', '',
    1, 3, '', 2],

    ['', 4, '', '',
    '', 1, 4, 2,
    '', '', '', 3,
    '', 3, '', ''],

    ['', '', 1 ,3,
    3, '', 4, 2,
    '', 4, '', '',
    '', '', '', ''],

    ['', 2, '', '',
    1, '', '', 3,
    2, 3, '', 4,
    '', 1, 3, 2],

    ['', '', '', 3,
    3, 2, '', 4,
    '', '', 4, '',
    1, '', '', 2],

    ['', '', '', 4,
    4, 2, 3, '',
    '', 3, '', 2,
    '', '', '', ''],

    ['', '', 1, '',
    '', '', '', 3,
    '', 4, 3, 1,
    '', '', 2, 4],

    [1, '', 3, 2,
    '', '', 1, '',
    4, '', '', 1,
    '', '', '', '']
];

var newGrid;

//Game functions//

//Starts the game
function startGame(){
    newGrid = randomGrid(grid);
    for(let i = 0; i < cell.length ; i++){ 
        cell[i].classList.add('show');
        cell[i].innerText = newGrid[i];
        if(newGrid[i] == ''){
            cell[i].classList.remove('incorrect');
            cell[i].classList.remove('correct');
            cell[i].classList.remove('show');
        }else{
            cell[i].classList.remove('incorrect');
            cell[i].classList.remove('correct');
        }
    } 
    resetTimer();
    stopTimer();
    setTimeout('startTimer()', 10);
    startGameInstructions.classList.add('hidden');
    setTimeout(slowlyHide, 200);
    if(selected.length != 0) selected[0].classList.remove('selected');
    selected = [];
    localStorage.setItem('facile number', number);
    localStorage.setItem('facile win', false);
    oneWin = false;
    localStorage.setItem('oneWinFacile', false);
}

//Hides the instructions once game is started
function slowlyHide(){
    startGameInstructions.classList.add('none');
}

//Randomly chooses a grid preset
//https://www.w3schools.com/js/js_random.asp

function getRndInteger(min, max) {
    return Math.floor(Math.random() * (max - min + 1) ) + min;
}

var oldGrid = []

oldGrid.push(localStorage.getItem('facile number'));

var number = localStorage.getItem('facile number');

function randomGrid(grid){
    let newGrid = [];
    number = getRndInteger(0, (grid.length-1));
    if(oldGrid.length == grid.length){
        for(let i = 0; i < grid.length; i++) oldGrid.shift();
    }
    while(oldGrid.includes(number)){
        number = getRndInteger(0, (grid.length-1));
    }
    newGrid = grid[number];
    gridSolution = solution[number];

    oldGrid.push(number);
    return newGrid;
}

//Cell selection function

var selected = [];

function selectGrid(cellNum){
    if(!createdGrid[cellNum].classList.contains('show') && !createdGrid[cellNum].classList.contains('correct')){ 
        if(selected.length === 0){
            createdGrid[cellNum].classList.add('selected');
            selected.push(createdGrid[cellNum]);
        }else if(selected[0] === createdGrid[cellNum]){ 
            selected[0].classList.remove('selected');
            selected.shift();
            selected.shift();
        }
        else{ 
            selected[0].classList.remove('selected');
            selected.shift();
            createdGrid[cellNum].classList.add('selected');
            selected.push(createdGrid[cellNum]);
        }
    }
}

//Adding numbers to selected cell with buttons
function addNumber(numpadNum){
    if(selected.length > 0) selected[0].innerHTML = numpadNum;
}

//Checks if Sudoku is completed correctly
var gridSolution = solution[number];

var correctAnsw = 0;
var oneWin

if(localStorage.getItem('oneWinFacile') == 'true'){
    oneWin = true;
}else{
    oneWin = false;
}


function checkWin(){
    for(let i = 0; i < cell.length; i++){  
        if(!cell[i].classList.contains('show')){
            if(cell[i].innerText == gridSolution[i]){
                cell[i].classList.remove('incorrect');
                cell[i].classList.add('correct');
                correctAnsw += 1;
            }else{
                cell[i].classList.add('incorrect');
                cell[i].classList.remove('correct');
            }
        }else{
            correctAnsw += 1;
        }
    }
    if(correctAnsw == cell.length && oneWin == false){
        stopTimer();
        if(localStorage.getItem('PB facile') == 'N/D' || PersonalBest(timer.innerHTML, localStorage.getItem('PB facile'))){
            localStorage.setItem('PB facile', timer.innerHTML);
        }
        localStorage.setItem('facile', numberOfWins(localStorage.getItem('facile')));
        localStorage.setItem('facile win', true);
        facile.innerHTML = 'Meilleur Temps: ' + localStorage.getItem('PB facile') + '<br>Nombre de Sudokus terminés: ' + localStorage.getItem('facile');
        normal.innerHTML = 'Meilleur Temps: ' + localStorage.getItem('PB normal') + '<br>Nombre de Sudokus terminés: ' + localStorage.getItem('normal');
        difficile.innerHTML = 'Meilleur Temps: ' + localStorage.getItem('PB difficile') + '<br>Nombre de Sudokus terminés: ' + localStorage.getItem('difficile');
        correctAnsw = 0;
        oneWin = true;
        localStorage.setItem('oneWinNormal', true);
    }if(selected.length > 0){
        selected[0].classList.remove('selected');
        selected = [];
    }
}
//Checks win by pressing the "Enter" key on keyboard
function checkWinKeypress(e){
    if(e.key === "Enter"){
        checkWin();
    }
}

//slowly hides the new game instructions
function slowlyHide(){
    startGameInstructions.classList.add('none');
}

//timer made with intervals
//https://dev.to/gspteck/create-a-stopwatch-in-javascript-2mak
var min = 0;
var sec = 0;
var ms = 0;
var stoptime = true;

if(localStorage.getItem('facile sec')){
    ms = parseInt(localStorage.getItem('facile ms'));
    sec = parseInt(localStorage.getItem('facile sec'));
    min = parseInt(localStorage.getItem('facile min'));
}

function startTimer() {
  if (stoptime == true) {
        stoptime = false;
        timerCycle();
    }
}
function stopTimer() {
  if (stoptime == false) {
    stoptime = true;
  }
}

function timerCycle() {
    if (stoptime == false) {
    ms = parseInt(ms);
    sec = parseInt(sec);
    min = parseInt(min);

    ms += 1;

    if (ms == 100) {
      sec += 1;
      ms = 0;
    }
    if (sec == 60) {
      min += 1;
      sec = 0;
      ms = 0;
    }if(min == 60){
        stopTimer()
    }

    if (ms < 10 || ms == 0) {
      ms = '0' + ms;
    }
    if (sec < 10 || sec == 0) {
      sec = '0' + sec;
    }
    if (min < 10 || min == 0) {
      min = '0' + min;
    }

    timer.innerHTML = min + ':' + sec + ':' + ms;

    setTimeout('timerCycle()', 10);
  }
}

function resetTimer() {
    timer.innerHTML = "00:00:00";
    stoptime = true;
    ms = 0;
    sec = 0;
    min = 0;
}

//adds numbers with keyboard
function addNumberKeypress(e){
    if(selected.length > 0){
        if(e.key === '1'){
            selected[0].innerHTML = 1;
        }else if(e.key === '2'){
            selected[0].innerHTML = 2;
        }else if(e.key === '3'){
            selected[0].innerHTML = 3;
        }else if(e.key === '4'){
            selected[0].innerHTML = 4;
        }
    }
}

//clears a case with backspace or delete
function clearCase(e){
    if(e.key == 'Backspace' && e.key == 'Delete'){
        selected[0].innerHTML = '';
    }
}

//checks if new time is personal best
function PersonalBest(newTime, oldTime){
    let newTimeArr = newTime.split(':');
    let oldTimeArr = oldTime.split(':');
    let minInSec1 = parseInt(newTimeArr[0]) * 60;
    let seconds1 = parseInt(newTimeArr[1]);
    let msInSec1 = parseInt(newTimeArr[2])/100;
    let minInSec2 = parseInt(oldTimeArr[0]) * 60;
    let seconds2 = parseInt(oldTimeArr[1]);
    let msInSec2 = parseInt(oldTimeArr[2])/100;
    let finishingTime1 = minInSec1 + seconds1 + msInSec1;
    let finishingTime2 = minInSec2 + seconds2 + msInSec2;
    if(finishingTime1 < finishingTime2) return true;
}

//adds numbers of wins
function numberOfWins(wins){
    numberWins = parseInt(wins);
    numberWins += 1;
    return numberWins;
}

//saves the grid for later use
function saveGrid(){
    if(startGameInstructions.classList.contains('hidden', 'none')){
        for(let i = 0; i < cell.length; i++){
            localStorage.setItem('facile number', number);
            localStorage.setItem('facile cell' + i, cell[i].innerText);
            localStorage.setItem('facile timer', timer.innerHTML);
            localStorage.setItem('facile ms', ms);
            localStorage.setItem('facile sec', sec);
            localStorage.setItem('facile min', min);
        }
    }
}

var savedNumber;

//prints the grid if it has been saved
function printSavedGrid(){
    startGameInstructions.classList.add('hidden', 'none');
    savedNumber = parseInt(localStorage.getItem('facile number'));
    for(let i = 0; i < cell.length; i++){
        let cellHTML = localStorage.getItem('facile cell' + i);
        if(grid[savedNumber][i] != cellHTML || grid[savedNumber][i] == ''){
            cell[i].classList.remove('show');
            if(localStorage.getItem('facile win') == 'true'){
                stopTimer();
                cell[i].classList.add('correct');
            }
        }
        cell[i].innerHTML = cellHTML;
    }
    timer.innerHTML = localStorage.getItem('facile timer');
    if(localStorage.getItem('facile win') == 'true'){
        stopTimer();
    }else {
        startTimer();
    }
}

//prints if timer is there
if(localStorage.getItem('facile timer')){
    printSavedGrid();
}

//Event Listeners
newGameBtn.addEventListener('click', function () {startGame()});
checkWinBtn.addEventListener('click', function(){checkWin()});

numpad1.addEventListener('click', function () {addNumber(1)});
numpad2.addEventListener('click', function () {addNumber(2)});
numpad3.addEventListener('click', function () {addNumber(3)});
numpad4.addEventListener('click', function () {addNumber(4)});

document.addEventListener('keypress', addNumberKeypress);
document.addEventListener('keypress', checkWinKeypress);
document.addEventListener('keydown', clearCase);

//if user goes to another page in website it saves grid
navbar.addEventListener('click', (event) => {
    if(event.target.id = 'nav'){
        saveGrid();
    }
})

//selection event listener
gridContainer.addEventListener('click', (event) => {
    if(event.target.parentNode.id != 'grid') return;
    let clickedCellNum = event.target.id.split('-').pop();
    selectGrid(clickedCellNum);
})

//deselect event listener
body.addEventListener('click', (event) => {
    if(!event.target.classList.contains('cell') && !event.target.classList.contains('number')){
        if(selected.length == 1){
            selected[0].classList.remove('selected');
            selected.shift();
        }
    }
})

//calling html elements for stats
const facile = document.getElementById('facile-stats');
const normal = document.getElementById('normal-stats');
const difficile = document.getElementById('difficile-stats');
const statsBtn = document.getElementById('statsBtn');
const stats = document.getElementById('statistiques');

//stats
if(!localStorage.getItem('PB difficile') && !localStorage.getItem('difficile')){
    localStorage.setItem('PB difficile', 'N/D');
    localStorage.setItem('difficile', '0');
}if(!localStorage.getItem('PB normal') && !localStorage.getItem('normal')){
    localStorage.setItem('PB normal', 'N/D');
    localStorage.setItem('normal', '0');
}if(!localStorage.getItem('PB facile') && !localStorage.getItem('facile')){
    localStorage.setItem('PB facile', 'N/D');
    localStorage.setItem('facile', '0');
}

facile.innerHTML = 'Meilleur Temps: ' + localStorage.getItem('PB facile') + '<br>Nombre de Sudokus terminés: ' + localStorage.getItem('facile');
normal.innerHTML = 'Meilleur Temps: ' + localStorage.getItem('PB normal') + '<br>Nombre de Sudokus terminés: ' + localStorage.getItem('normal');
difficile.innerHTML = 'Meilleur Temps: ' + localStorage.getItem('PB difficile') + '<br>Nombre de Sudokus terminés: ' + localStorage.getItem('difficile');

statsBtn.addEventListener('click', function(){
    if(stats.classList.contains('none'))stats.classList.remove('none');
    if(stats.classList.contains('hidden'))stats.classList.remove('hidden');
    else if(!stats.classList.contains('hidden'))stats.classList.add('hidden');
})

//if user closes tab or reloads page it saves grid
window.onbeforeunload = closingCode;
function closingCode(){
    saveGrid();
    return null;
}

//easter egg
if(localStorage.getItem('easterEgg') == 'true'){
    document.body.style.backgroundImage = 'url("")';
    document.body.style.backgroundRepeat = 'no-repeat';
    document.body.style.backgroundAttachment = 'fixed';
    document.body.style.width = 'calc(100vw)';
    document.body.style.heigth = '100vh';
    document.body.style.objectFit = 'cover';
}